model Order {
   id        String   @id
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   completedAt DateTime?

   status OrderStatus

   userId String
   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

   standardPcbs      StandardPcb[]
   advancedPcbs      AdvancedPcb[]
   flexiblePcbs      FlexiblePcb[]
   rigidFlexes       RigidFlex[]
   stencils          Stencil[]
   assemblies        Assembly[]
   cncs              CNC[]
   sheetMetals       SheetMetal[]
   threePrintings    ThreePrinting[]
   injectionMoldings InjectionMolding[]
   vacuumCastings    VacuumCasting[]

   deliveryAddress OrderDeliveryAddress?
   shippingInfo    OrderShippingInfo?
   paymentInfo     OrderPaymentInfo?

   reviewMessages   OrderReviewMessage[]
   deliveryStatuses OrderDeliveryStatus[]
   timeline         OrderTimeline[]
}

enum OrderStatus {
   CART
   SAVED
   REVIEW
   REJECTED
   APPROVED
   CONFIRMED
   FABRICATION
   DELIVERY
   COMPLETED
   CANCELLED
   REFUNDED
}

model OrderTimeline {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   action  OrderAction
   message String?

   orderId String
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderAction {
   SAVE
   SUBMIT_REVIEW
   CANCEL_REVIEW
   REJECT
   APPROVE
   CONFIRM
   START_PRODUCTION
   OUT_FOR_DELIVERY
   COMPLETE
   CANCEL
   REFUND
}

model OrderDeliveryAddress {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   name         String
   phone        String
   addressLine1 String
   addressLine2 String
   city         String
   state        String
   country      String
   postalCode   String

   addressId String?
   address   Address? @relation(fields: [addressId], references: [id])

   orderId String @unique
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderShippingInfo {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   countryName  String
   methodName   String
   price        Float
   deliveryTime String
   restriction  String

   countryId String?
   country   ShippingCountry? @relation(fields: [countryId], references: [id])

   methodId String?
   method   ShippingMethod? @relation(fields: [methodId], references: [id])

   orderId String @unique
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderReviewMessage {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   message String

   userId String
   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

   orderId String
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderPaymentInfo {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   paymentId String
   status    String

   captureId     String
   captureStatus String
   captureTime   DateTime

   amount   String
   currency String

   payerId    String
   payerName  String
   payerEmail String

   orderId String @unique
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderDeliveryStatus {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   num         Int
   status      String
   completedAt DateTime?

   orderId String
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
