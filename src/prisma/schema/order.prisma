model Order {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   status OrderStatus

   userId String
   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

   deliveryAddress OrderDeliveryAddress?
   shippingInfo    OrderShippingInfo?

   standardPcbs StandardPcb[]
   advancedPcbs AdvancedPcb[]
   flexiblePcbs FlexiblePcb[]
   stencils     Stencil[]
   assemblies   Assembly[]

   timeline         OrderTimeline[]
   reviewMessages   OrderReviewMessage[]
   deliveryStatuses OrderDeliveryStatus[]
}

enum OrderStatus {
   CART
   SAVED
   IN_REVIEW
   REJECTED
   AWAITING_PAYMENT
   CONFIRMED
   FABRICATION
   DELIVERY
   COMPLETED
   CANCELLED
   REFUNDED
}

model OrderDeliveryAddress {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   name         String
   phone        String
   addressLine1 String
   addressLine2 String
   city         String
   state        String
   country      String
   postalCode   String

   addressId String?
   address   Address? @relation(fields: [addressId], references: [id])

   orderId String @unique
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderShippingInfo {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   countryName  String
   methodName   String
   price        Float
   deliveryTime String
   restriction  String

   countryId String?
   country   ShippingCountry? @relation(fields: [countryId], references: [id])

   methodId String?
   method   ShippingMethod? @relation(fields: [methodId], references: [id])

   orderId String @unique
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderTimeline {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   action  OrderAction
   message String?

   orderId String
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderAction {
   SAVE
   SUMBIT_FOR_REVIEW
   REJECT
   ACCEPT
   PAYMENT_MADE
   START_PRODUCTION
   OUT_FOR_DELIVERY
   CANCEL
   COMPLETE
   REFUND
}

model OrderReviewMessage {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   message String

   userId String
   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

   orderId String
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderDeliveryStatus {
   id        String   @id @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   status    String
   completed Boolean

   orderId String
   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
