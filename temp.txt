model User {
   id        String   @id
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   email      String  @unique
   firstName  String
   lastName   String
   phone      String
   profilePic String?

   accounts Account[]
   sessions Session[]
}

model Account {
   id        String   @id
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   provider      String
   providerId    String?
   emailVerified Boolean?
   passwordHash  String?

   userId String
   user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Session {
   id        String   @id
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   expiresAt DateTime

   userId String
   user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

import { Lucia } from 'lucia';
import { PrismaAdapter } from '@lucia-auth/adapter-prisma';
import { ENV } from '$env/static/private';

const adapter = new PrismaAdapter(prisma.session, prisma.user);

export const lucia = new Lucia(adapter, {
	sessionCookie: {
		attributes: {
			secure: ENV !== 'DEV'
		}
	},
	getUserAttributes: (data) => data,
	getSessionAttributes: (data) => data
});

declare module 'lucia' {
	interface Register {
		Lucia: typeof lucia;
		DatabaseUserAttributes: {
			email: string;
		};
	}
}


pnpm i lucia @lucia-auth/adapter-prisma arctic